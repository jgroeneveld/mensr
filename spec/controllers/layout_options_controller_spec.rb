require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe LayoutOptionsController do
  include Devise::TestHelpers

  before (:each) do
    @user = Factory.create(:user)
    sign_in @user
  end

  def mock_layout_option(stubs={})
    @mock_layout_option ||= mock_model(LayoutOption, stubs).as_null_object
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested layout_option" do
        LayoutOption.stub(:find).with("37") { mock_layout_option }
        mock_layout_option.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :layout_option => {'these' => 'params'}
      end

      it "assigns the requested layout_option as @layout_option" do
        LayoutOption.stub(:find) { mock_layout_option(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:layout_option).should be(mock_layout_option)
      end

      it "redirects to the layout_option" do
        LayoutOption.stub(:find) { mock_layout_option(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(customize_menue_path)
      end
    end

    describe "with invalid params" do
      it "assigns the layout_option as @layout_option" do
        LayoutOption.stub(:find) { mock_layout_option(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:layout_option).should be(mock_layout_option)
      end

      it "re-renders the 'edit' template" do
        LayoutOption.stub(:find) { mock_layout_option(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end
end
